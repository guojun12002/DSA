描述
通过扩展已实现的基本数据结构，模拟更为复杂的数据结构，是一种常见而实用的技巧。这里，我们将利用栈结构，来模拟一种功能增强的队列。

具体来说，你必须首先实现一个元素类型为int的栈，该栈能且只能支持以下操作接口：

bool empty(); //判断是否栈空

void push(int); //向栈中压入一个整数

int pop(); //弹出栈顶元素，并返回其数值

int top(); //仅获取栈顶元素的值，但不弹出
接下来，你必须借助以上栈结构，模拟所谓的队堆（queap）结构，它至少支持以下操作接口：

void enqueue(int); //新元素作为尾元素入队

int dequeue(); //队首元素出队，并返回其数值（调用时输入数据保证队列非空）

int min(); //返回队列内的最小元素（调用时输入数据保证队列非空）
可见，这种结构之所以称作队堆，是因为它兼具一定的队列（queue）和堆（heap）的功能。

最后，你还需要通过一系列真实的查询和修改操作，对所实现的队堆结构进行测试。

输入
第一行仅含一个整数，即查询和修改操作的总数n。

以下n行，依次给出对初始为空的队堆所实施的n次操作。各行的格式为以下几种之一：

1. E x	 //即enqueue(int x)

2. D	 //即x = dequeue()

3. M	 //即x = min()

输出
若D和M操作共计m <=n 次，则共m行，依次给出各D/M操作所对应的返回值。

输入样例
9
E 5
E 6
M
E 2
M
D
M
D
M
输出样例
5
2
5
2
6
2
限制
0 <=m<= n <= 1,000,000，m,n均为整数

所有元素需要存储在底层栈中，即除了底层栈之外的空间使用应为O(1)。

实现队堆所用到的栈的个数应为常数。

不能向该存储数据的栈中添加其他public成员函数（构造、析构函数除外）或变量。

你可以根据需要包装该底层栈形成其他数据结构，其他不存储数据的结构的成员函数和变量可以自由选取。

请通过拓展给定的模版queap.cpp来实现。

时间：1sec

空间：256MB

提示
**一级提示**

考虑如何使用多个栈分别模拟:

1.可以快速返回最值的栈

2.队列
