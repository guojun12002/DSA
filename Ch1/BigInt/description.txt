描述
　　邓俊辉老师的作业常常过于简单，数据类型只需使用int。助教们一致认为，向同学们介绍Python中自带的长整型是十分有必要的。例如，它可以计算几百位的整数乘法。 但是，在介绍长整型之前，助教决定让你自己实现一遍长整型乘法，以加深对它的理解。

输入
　　输入共包含n+1行，第1行包含一个整数n，表示你需要计算n组乘法。

　　接下来n行，每行包含两个非负整数a和b。

输出
　　输出共包含n行，请对于每一组输入的a、b，输出他们的乘积。

输入样例
3
1 1
2 2
123123 789789
输出样例
1
4
97241191047
限制
n≤100

a≤10^200

b≤10^200

提示
由于计算机的存储字节有限，所以不能完整表示一个很大整数的精确值，这时候就得用到其他的方法，称之为高精度算法。这里，主要说下高精度乘法。高精度乘法，实际上，就是模拟乘法的过程，像小学的笔算过程。

以加法为例：

    12345678910111213 + 1111111111111111111
使用两个数组存储：

    a[]={3,1,2,1,1,1,0,1,9,8,7,6,5,4,3,2,1};
    b[]={1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
两个数组分别把数值倒存,逐位相加,每位加后判断是否大于10,再进行进位，如果数值的规模相当大，可以考虑多位一存节约空间。

对于高精度的乘法，则是进行多次的加法，并将结果统一相加而已。

这样的算法是O(n^2)级别的，已经可以解决本题。实际上，存在基于FFT（快速傅立叶变换）的算法，可以达到$O(n \log (n))$的时间复杂度。 有兴趣的同学可以自行阅读相关材料进行实现。